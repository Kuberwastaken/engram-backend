name: Batch Recover Artifact

on:
  workflow_dispatch:
    inputs:
      batch_size_mb:
        description: 'Batch size in MB (default: 1000)'
        required: false
        default: '1000'
        type: string

permissions:
  contents: write
  actions: read

jobs:
  recover:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Free up maximum disk space
      run: |
        echo "üßπ Aggressive disk space cleanup..."
        
        # Remove everything we can
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules
        sudo rm -rf /usr/share/swift
        
        # Clean package cache
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        sudo apt-get clean
        
        echo "üìä Available space after cleanup:"
        df -h /

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action (Batch Recovery)"

    - name: Download and process artifact in chunks
      run: |
        echo "üîç Finding latest artifact..."
        
        # Get latest artifact
        RUNS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=5")
        
        FOUND_ARTIFACT="false"
        for RUN_ID in $(echo "$RUNS_JSON" | jq -r '.workflow_runs[] | select(.name == "Download Materials") | .id'); do
          echo "Checking run $RUN_ID..."
          
          ARTIFACTS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts")
          
          ARTIFACT_INFO=$(echo "$ARTIFACTS_JSON" | jq -r \
            '.artifacts[] | select(.name | startswith("downloaded-content")) | "\(.id)|\(.name)|\(.size_in_bytes)"' | head -1)
          
          if [ -n "$ARTIFACT_INFO" ] && [ "$ARTIFACT_INFO" != "" ]; then
            IFS='|' read -r ARTIFACT_ID ARTIFACT_NAME ARTIFACT_SIZE <<< "$ARTIFACT_INFO"
            echo "Found artifact: $ARTIFACT_NAME ($(($ARTIFACT_SIZE / 1024 / 1024))MB)"
            
            # Create a Python script to handle selective extraction
            cat > extract_chunks.py << 'EOF'
import zipfile
import os
import sys
import subprocess
from pathlib import Path

def get_dir_size(path):
    """Get directory size in bytes"""
    total = 0
    try:
        for entry in os.scandir(path):
            if entry.is_file():
                total += entry.stat().st_size
            elif entry.is_dir():
                total += get_dir_size(entry.path)
    except:
        pass
    return total

def git_commit_and_push(message):
    """Commit and push current state"""
    try:
        subprocess.run(['git', 'add', 'Content/'], check=True)
        subprocess.run(['git', 'add', 'download-progress.json'], check=False)
        subprocess.run(['git', 'commit', '-m', message], check=True)
        subprocess.run(['git', 'push'], check=True)
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    artifact_url = sys.argv[1]
    batch_size_mb = int(sys.argv[2])
    batch_size_bytes = batch_size_mb * 1024 * 1024
    
    print(f"Downloading and extracting in {batch_size_mb}MB batches...")
    
    # Download artifact
    os.system(f'curl -L -H "Authorization: token ${{{{ secrets.GITHUB_TOKEN }}}}" "{artifact_url}" -o artifact.zip')
    
    if not os.path.exists('artifact.zip'):
        print("Failed to download artifact")
        sys.exit(1)
    
    # Process zip file
    with zipfile.ZipFile('artifact.zip', 'r') as zip_ref:
        files_to_extract = [f for f in zip_ref.filelist if f.filename.startswith('Content/') or f.filename == 'download-progress.json']
        
        current_batch_size = 0
        batch_count = 0
        
        for file_info in files_to_extract:
            # Extract file
            try:
                zip_ref.extract(file_info.filename, '.')
                file_size = file_info.file_size
                current_batch_size += file_size
                
                print(f"Extracted: {file_info.filename} ({file_size} bytes)")
                
                # Check if batch is full
                if current_batch_size >= batch_size_bytes:
                    batch_count += 1
                    print(f"\nüì¶ Batch {batch_count} complete ({current_batch_size / 1024 / 1024:.1f}MB)")
                    
                    # Commit batch
                    commit_msg = f"üì¶ Batch {batch_count}: {current_batch_size / 1024 / 1024:.1f}MB recovered"
                    if git_commit_and_push(commit_msg):
                        print("‚úÖ Batch committed successfully")
                    else:
                        print("‚ö†Ô∏è Batch commit failed")
                    
                    current_batch_size = 0
                    
                    # Clean up to save space
                    os.system('rm -f artifact.zip')
                    
            except Exception as e:
                print(f"Failed to extract {file_info.filename}: {e}")
                continue
        
        # Final commit for remaining files
        if current_batch_size > 0:
            batch_count += 1
            commit_msg = f"üì¶ Final batch: {current_batch_size / 1024 / 1024:.1f}MB recovered"
            if git_commit_and_push(commit_msg):
                print("‚úÖ Final batch committed successfully")
    
    # Cleanup
    if os.path.exists('artifact.zip'):
        os.remove('artifact.zip')
    
    print(f"\n‚úÖ Recovery complete! Processed {batch_count} batches")

if __name__ == "__main__":
    main()
EOF
            
            # Run the chunked extraction
            ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip"
            python3 extract_chunks.py "$ARTIFACT_URL" "${{ github.event.inputs.batch_size_mb || '1000' }}"
            
            FOUND_ARTIFACT="true"
            break
          fi
        done
        
        if [ "$FOUND_ARTIFACT" = "false" ]; then
          echo "‚ùå No artifacts found"
          exit 1
        fi

    - name: Verify final state
      run: |
        echo "üîç Final verification..."
        if [ -d "Content" ]; then
          TOTAL_FILES=$(find Content -type f | wc -l)
          TOTAL_SIZE=$(du -sh Content | cut -f1)
          GIT_FILES=$(git ls-files Content/ | wc -l)
          
          echo "üìä Final Results:"
          echo "  - Total files: $TOTAL_FILES"
          echo "  - Total size: $TOTAL_SIZE"
          echo "  - Git tracked: $GIT_FILES"
          
          echo "## üéâ Batch Recovery Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Files**: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Tracked**: $GIT_FILES" >> $GITHUB_STEP_SUMMARY
        fi
